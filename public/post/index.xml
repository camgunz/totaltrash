<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Posts on TotalTrash </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://totaltrash.org/post/index.xml/</link>
    <language>en-us</language>
    
    
    <updated>Sat, 07 Feb 2015 00:25:14 UTC</updated>
    
    <item>
      <title>d2k_scripting</title>
      <link>http://totaltrash.org/post/d2k_scripting/</link>
      <pubDate>Sat, 07 Feb 2015 00:25:14 UTC</pubDate>
      
      <guid>http://totaltrash.org/post/d2k_scripting/</guid>
      <description>&lt;p&gt;Scripting in D2K has come a long way.  The interface is coming along nicely,
largely because Lua makes it so easy to write bindings.  For example, this is
the function used to match key events to key presses:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static int XI_InputEventIsKeyPress(lua_State *L) {
  event_t *ev = (event_t *)luaL_checkudata(L, 1, &amp;quot;InputEvent&amp;quot;);
  int key = luaL_checkint(L, 2);

  if (ev-&amp;gt;type == ev_key &amp;amp;&amp;amp; ev-&amp;gt;pressed &amp;amp;&amp;amp; ev-&amp;gt;key == key)
    lua_pushboolean(L, true);
  else
    lua_pushboolean(L, false);

  return 1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;XI_InputEventIsKeyPress&lt;/code&gt; is a method inside the InputEvent class, which is
registered like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;X_RegisterType(&amp;quot;InputEvent&amp;quot;, 21, 
  &amp;quot;new&amp;quot;,                  XI_InputEventNew,
  &amp;quot;reset&amp;quot;,                XI_InputEventReset,
  &amp;quot;__tostring&amp;quot;,           XI_InputEventToString,
  &amp;quot;is_key&amp;quot;,               XI_InputEventIsKey,
  &amp;quot;is_mouse&amp;quot;,             XI_InputEventIsMouse,
  &amp;quot;is_joystick&amp;quot;,          XI_InputEventIsJoystick,
  &amp;quot;is_mouse_movement&amp;quot;,    XI_InputEventIsMouseMovement,
  &amp;quot;is_joystick_movement&amp;quot;, XI_InputEventIsJoystickMovement,
  &amp;quot;is_joystick_axis&amp;quot;,     XI_InputEventIsJoystickAxis,
  &amp;quot;is_joystick_ball&amp;quot;,     XI_InputEventIsJoystickBall,
  &amp;quot;is_joystick_hat&amp;quot;,      XI_InputEventIsJoystickHat,
  &amp;quot;is_movement&amp;quot;,          XI_InputEventIsMovement,
  &amp;quot;is_press&amp;quot;,             XI_InputEventIsPress,
  &amp;quot;is_release&amp;quot;,           XI_InputEventIsRelease,
  &amp;quot;get_key&amp;quot;,              XI_InputEventGetKey,
  &amp;quot;get_key_name&amp;quot;,         XI_InputEventGetKeyName,
  &amp;quot;get_value&amp;quot;,            XI_InputEventGetValue,
  &amp;quot;get_xmove&amp;quot;,            XI_InputEventGetXMove,
  &amp;quot;get_ymove&amp;quot;,            XI_InputEventGetYMove,
  &amp;quot;get_char&amp;quot;,             XI_InputEventGetChar,
  &amp;quot;is_key_press&amp;quot;,         XI_InputEventIsKeyPress
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The implementation of &lt;code&gt;X_RegisterObjects&lt;/code&gt; is a little long, but it&amp;rsquo;s not
terribly complex.&lt;/p&gt;

&lt;p&gt;All this scaffolding enables a simple, but powerful scripting interface.  For
example, here&amp;rsquo;s the console&amp;rsquo;s event handler:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Console:handle_event(event)
  if event:is_key_press(d2k.Key.BACKQUOTE) then
    self:toggle_scroll()
  end

  if self.scroll_rate &amp;lt; 0 or self.height == 0 then
    return
  end

  if d2k.KeyStates.shift_is_down() then
    if event:is_key_press(d2k.Key.UP) then
      self.output:scroll_up(Console.HORIZONTAL_SCROLL_AMOUNT)
      return true
    elseif event:is_key_press(d2k.Key.PAGE_UP) then
      self.output:scroll_up(Console.HORIZONTAL_SCROLL_AMOUNT * 10)
      return true
    elseif event:is_key_press(d2k.Key.DOWN) then
      self.output:scroll_down(Console.HORIZONTAL_SCROLL_AMOUNT)
      return true
    elseif event:is_key_press(d2k.Key.PAGE_DOWN) then
      self.output:scroll_down(Console.HORIZONTAL_SCROLL_AMOUNT * 10)
      return true
    end
  elseif event:is_key_press(d2k.Key.UP) then
    self.input:show_previous_command()
  elseif event:is_key_press(d2k.Key.DOWN) then
    self.input:show_next_command()
  elseif event:is_key_press(d2k.Key.LEFT) then
    self.input:move_cursor_left()
  elseif event:is_key_press(d2k.Key.RIGHT) then
    self.input:move_cursor_right()
  elseif event:is_key() and event:is_press() then
    self.input:insert_text(event:get_char())
  end

  return false
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Never mind the temporary placeholder constants
(&lt;code&gt;Console.HORIZONTAL_SCROLL_AMOUNT&lt;/code&gt;, etc.) ;).  The point is that it was very
easy to build an entirely new object-oriented event handling interface.&lt;/p&gt;

&lt;p&gt;I &lt;strong&gt;did&lt;/strong&gt; have to refactor nearly all the SDL event stuff in C, but it was in
need anyway.  As a result, after events are pulled from SDL in C, event
dispatch and handling happens in Lua now.  This means I can slowly start to
move things like the menu and screen drawing (&lt;strong&gt;NOT&lt;/strong&gt; the renderer) into Lua,
and delete reams of junk code in the process (man, I dream of the day the C
menu code dies).&lt;/p&gt;

&lt;p&gt;Now that event handling happens in Lua, interfaces can be implemented using
only scripting.  The console is my test case; as I develop it, I&amp;rsquo;m learning to
use Lua GObject Introspection and fixing the scripting interface I&amp;rsquo;ve built so
far.  It&amp;rsquo;s not a perfect test (there&amp;rsquo;s not a &lt;strong&gt;ton&lt;/strong&gt; of interaction with
D2K-proper), but it&amp;rsquo;s pretty good for a first test.&lt;/p&gt;

&lt;p&gt;Speaking of Lua GObject Introspection, I&amp;rsquo;m making progress building D2K&amp;rsquo;s
dependencies on Windows.  Mingw-builds provides a native, MinGW-w64-built
Python which can be used for GObject Introspection, so I&amp;rsquo;ve been going through
the process of writing a bunch of scripts to automatically build everything D2K
needs on Windows.  This has been a huge roadblock.  My secret dream is that
peopel can use my work as a kind of cross-platform shim for C/C++ projects, but
given the relative unpopularity of similar projects (win-builds, MSYS2, MXE),
I&amp;rsquo;m not optimistic, haha.&lt;/p&gt;

&lt;p&gt;Having developed a fair amount of code in Lua, I feel qualified &amp;ndash; nay,
compelled &amp;ndash; to give an opinion!&lt;/p&gt;

&lt;p&gt;Lua as an API is fantastic.  I wish the documentation were slightly better, but
honestly it&amp;rsquo;s pretty good.  The Lua site itself is hideous; I remember better
pages from 1998.  It sounds like I&amp;rsquo;m kidding, but I am not.  I wish there were
better errors in Lua; while they technically make sense, you only realize
&lt;strong&gt;why&lt;/strong&gt; they make sense once you guess correctly as to what the problem is.
Lua the language is overall a fairly positive experience.  The &amp;ldquo;different just
to be different&amp;rdquo; stuff like &lt;code&gt;~=&lt;/code&gt; meaning &amp;lsquo;not equal to&amp;rsquo;, &lt;code&gt;elseif&lt;/code&gt; instead of
literally anything else (&lt;code&gt;else if&lt;/code&gt;, &lt;code&gt;elif&lt;/code&gt;), and arrays starting at 1 are all
extremely bothersome.  Especially the array index thing, my God what an
abomination.  For loop syntax is a little free-form to me; I really don&amp;rsquo;t
understand why&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for i=0,10,2 do
  print(string.format(&#39;i is %d&#39;, i))
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is better than:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for (int i = 0; i &amp;lt;= 10, i += 2) {
  printf(&amp;quot;i is %d\n&amp;quot;, i);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I &lt;strong&gt;do&lt;/strong&gt; understand why it&amp;rsquo;s worse though: it&amp;rsquo;s less explicit.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;local&lt;/code&gt; is a big mistake too.  Lua argues that &amp;ldquo;Local by default is wrong.
Maybe global by default is also wrong, [but] the solution is not local by
default&amp;rdquo;, but come on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I am typing &lt;code&gt;local&lt;/code&gt; everywhere&lt;/li&gt;
&lt;li&gt;In Python, I type &lt;code&gt;global&lt;/code&gt; only when I have to, and it serves as
documentation&lt;/li&gt;
&lt;li&gt;If you forget to type &lt;code&gt;local&lt;/code&gt;, you can destroy your program in a very
hard-to-discover way&lt;/li&gt;
&lt;li&gt;If you forget to type &lt;code&gt;global&lt;/code&gt;, the damage is limited to that function and
whatever depends on it.  Which, admittedly, is still pretty bad, but what
is better, more damage that&amp;rsquo;s hard to reason about, or less damage that&amp;rsquo;s
easier to reason about?&lt;/li&gt;
&lt;li&gt;If you meant &amp;ldquo;declarations should look like declarations&amp;rdquo;, &lt;code&gt;var&lt;/code&gt; would have
sufficed, and wouldn&amp;rsquo;t get conflated with the scoping issue.&lt;/li&gt;
&lt;li&gt;If you meant &amp;ldquo;scope should be explicit&amp;rdquo;, how much more explicit than &amp;ldquo;I
defined this variable in this scope, therefore that&amp;rsquo;s where it lives&amp;rdquo; can
you get?  Do you want to define variables for other scopes?  &lt;strong&gt;MADNESS&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The other annoying thing in Lua is that while syntactic sugar abounds for
things that really aren&amp;rsquo;t that big a deal (using &lt;code&gt;:&lt;/code&gt; instead of &lt;code&gt;.&lt;/code&gt; to pass the
implicit &lt;code&gt;self&lt;/code&gt; to object method calls, omitting parentheses when only passing
a single string/table argument, etc.), there is no syntactic sugar for
implementing a class or building a module.  You have to wade into this morass
of metatables and the implicit workings of &lt;code&gt;require&lt;/code&gt; in order to access basic
functionality.  You can&amp;rsquo;t argue that Lua isn&amp;rsquo;t object-oriented because it has
&lt;code&gt;:&lt;/code&gt; and has a whole section on &amp;ldquo;Object-Oriented Programming&amp;rdquo; in the book
(complete with helpful APIs for defining userdata types).  By the way,
&amp;ldquo;userdata&amp;rdquo; is really poorly named.  Regular userdata is a blob managed by Lua,
light userdata is a blob &amp;ndash; tracked by a pointer &amp;ndash; managed in native code.
Boom, that&amp;rsquo;s it.  Anyway, there ought to be an easier way to define classes and
modules without understanding the deep workings of &lt;code&gt;require&lt;/code&gt; and Lua&amp;rsquo;s method
dispatch.&lt;/p&gt;

&lt;p&gt;Lua is also a little too flexible.  Leaving off parentheses is just a huge
problem for readability, and in a language that makes you type so much
(&amp;ldquo;function&amp;rdquo;, &amp;ldquo;then&amp;rdquo;, &amp;ldquo;end&amp;rdquo;, &amp;ldquo;do&amp;rdquo;, &amp;ldquo;repeat&amp;rdquo;, &amp;ldquo;until&amp;rdquo;) it doesn&amp;rsquo;t make a lot of
sense.  I guess maybe they were worried about weird symbols confusing users,
but how much does dropping the parentheses really buy you when 99% of the time
what follows is a &amp;ldquo;{&amp;rdquo; ?  Plus, while I pretty much chose Lua over Python
because it isn&amp;rsquo;t whitespace-sensitive, there are times I really wish it were.
If I read another piece of code with all the if blocks on the same line, I&amp;rsquo;m
gonna burn Github to the ground.  Whew!&lt;/p&gt;

&lt;p&gt;In fact, those three annoyances pretty much sum up the Lua experience on the
script side.  Lua is everything you want in a scripting language: fast, simple,
flexible and powerful.  But then you find a bunch of code written in a totally
unreadable style and you get pissed, or you find yourself mucking about with
Lua&amp;rsquo;s internals because there&amp;rsquo;s no syntactic sugar for this very simple thing
you want to do, or your code doesn&amp;rsquo;t work because Lua does something different
for absolutely no reason.&lt;/p&gt;

&lt;p&gt;All that said, if you can live with 1-based indexing, Lua is an excellent
language.  None of the other annoyances are problematic enough to justify not
choosing it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>gobject_introspection</title>
      <link>http://totaltrash.org/post/gobject_introspection/</link>
      <pubDate>Mon, 08 Dec 2014 20:46:22 UTC</pubDate>
      
      <guid>http://totaltrash.org/post/gobject_introspection/</guid>
      <description>&lt;p&gt;I had originally planned to use &lt;a href=&#34;http://www.lua.org&#34;&gt;Lua&lt;/a&gt; to re-implement D2K&amp;rsquo;s
console, but using &lt;a href=&#34;http://wiki.gnome.org/GObjectIntrospection&#34;&gt;GObject
Introspection&lt;/a&gt; via &lt;a href=&#34;http://github.com/pavouk/lgi&#34;&gt;Lua GObject
Introspection&lt;/a&gt; was just too hard, because GObject
Introspection depends on Python, which requires dozens of patches to
cross-compile using MinGW-w64.  You can find these patches scattered
everywhere, from random GitHub or Bitbucket accounts to the MinGW-Builds
tarballs, and what&amp;rsquo;s clear from the number of patches is that none of it is
guaranteed to work at all, let alone work correctly.&lt;/p&gt;

&lt;p&gt;So now my plan is to essentially build my own bindings.  I can only imagine
what&amp;rsquo;s really involved with this, so it may be that I abandon this as well.&lt;/p&gt;

&lt;p&gt;Designing as I write this, I envision something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;=======================================================================
|                                                                     |
|                       xf.Console (in Lua)                           |
|                           ||                                        |
|                           \/                                        |
|                     Widget Library (in Lua)                         |
|                           ||                                        |
|                           \/                                        |
|                       PangoCairo                                    |
|                         /    \                                      |
|                     Pango    Cairo                                  |
|                                                                     |
=======================================================================
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is, unfortunately, lots of work.  I&amp;rsquo;m currently planning on not providing
full bindings to Pango, Cairo or PangoCairo, although I don&amp;rsquo;t know how hard it
would be to do so.  If it ends up that it&amp;rsquo;s as simple as generating (or
C-N-P&amp;rsquo;ing) the rest of the code, then I&amp;rsquo;ll go the whole way.  I certainly won&amp;rsquo;t
hold up D2K development for 100% coverage here.&lt;/p&gt;

&lt;p&gt;I would feel remiss if I left this post without noting my dismay at Python&amp;rsquo;s
lack of MinGW support, which is starting to snowball into a general dislike of
Python.  Its abject slowness, inability to use more than 1 CPU core, wild
memory consumption, total mishandling of Unicode, lack of support for MinGW,
and insane Python3 redesign (for essentially no good reason, because the
Unicode redesign is broken) rule it out for almost anything I will ever do.
I&amp;rsquo;d rather build a GUI in C++ with wxWidgets or QT, or C and GTK than I would
with Python and respective bindings.  I&amp;rsquo;d sooner build a website in Go or Java
than I would with Python and its frameworks.  Its CPU and RAM usage rule it out
for systems programming, where C/C++/Go/Java shine.&lt;/p&gt;

&lt;p&gt;These days, all I use Python for are when I need better scripting than what
Bash will provide, and to be honest, I&amp;rsquo;m thinking about improving my Bash
knowledge so I won&amp;rsquo;t have to do that either.  It&amp;rsquo;s crazy because I have a lot
of deep Python knowledge, but it&amp;rsquo;s just not useful anymore.&lt;/p&gt;

&lt;p&gt;Anyway, I think this delays scripting and the console for a while.  I was
hoping for a quick translation between the existing C code and the (to be
rewritten more performantly) new Lua implementation, but it looks like there&amp;rsquo;s
some plumbing I have to add first.  That&amp;rsquo;s a shame because I was excited about
this, but now it just looks like 90% grunt work.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>D2K Plasma/Bullet Lag</title>
      <link>http://totaltrash.org/post/d2k_plasma_lag/</link>
      <pubDate>Thu, 13 Nov 2014 15:54:38 UTC</pubDate>
      
      <guid>http://totaltrash.org/post/d2k_plasma_lag/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/camgunz/d2k/commit/42f4ae5f65a630844284c049393db58233225c0a&#34;&gt;Rev. 42f4ae5&lt;/a&gt;
lessens the amount of data sent for certain types of actors (plasma, spider
demon plasma, bullet puffs and blood spots) when they spawn.  This was
necessary because these actors tend to spawn very rapidly, causing lots of new
information to be sent over the wire (delta compression doesn&amp;rsquo;t help here
because the actors are new), which would lag (throttle) clients on bad
connections.  A little more could be done here, and in fact, the solution could
be seen as a hack.  I think Valve, for example, has fine-tuned controls about
what entity fields are synchronized between client and server, which can be
helpful for mods.  In D2K, if you add more rapidly-spawning actors, there&amp;rsquo;s not
a great way to tell the engine to only send certain data about them, let alone
specify what that data should be, and how to fill in the blanks clientside.&lt;/p&gt;

&lt;p&gt;D2K struggled with this more than other C/S ports because of its &amp;ldquo;send
everything&amp;rdquo; philosophy.  Delta compression works because the world usually
changes very little, but an actor is 312 bytes, and delta compression can&amp;rsquo;t
leave any of that data out when an actor first spawns.  2-3 new actors over a
couple of TICs isn&amp;rsquo;t a big deal, but the SSG spawns something like 20 bullet
puffs; that&amp;rsquo;s over 6K!&lt;/p&gt;

&lt;p&gt;To fix this, we pull the size down from 312 to 48 bytes (44 for puffs &amp;amp;
blood).  This is still a lot of data for 1 SSG shot (~900 bytes), and we can
probably pull it down even more if we get smarter (puffs don&amp;rsquo;t need angle,
pitch or flags, can save 16 bytes, or 320 per SSG shot, there).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>D2K Client Sync</title>
      <link>http://totaltrash.org/post/d2k_client_sync/</link>
      <pubDate>Thu, 13 Nov 2014 15:06:50 UTC</pubDate>
      
      <guid>http://totaltrash.org/post/d2k_client_sync/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/camgunz/d2k/commit/c6a8550d0f161c970efaca4bc705abe3914c07ae&#34;&gt;Rev. c6a8550&lt;/a&gt;
is my latest attempt at solidifying clientside sync (along with a couple of
preceding commits).  After trying dozens of different schemes, I finally
discovered one that works nearly perfectly.&lt;/p&gt;

&lt;p&gt;First of all, clients need to know what commands a server ran between the
delta&amp;rsquo;s start state and end state.  This isn&amp;rsquo;t so important for consoleplayer&amp;rsquo;s
position, but it important in order to get accurate sounds from the other
players.  The client runs commands from other players (non-consoleplayer
commands, or &amp;ldquo;NCP&amp;rdquo; commands), during this phase, called &amp;ldquo;synchronization&amp;rdquo;, and
that&amp;rsquo;s where the it will start sounds such as rockets/plasma firing, lifts
starting, etc.  It&amp;rsquo;s possible for consoleplayer&amp;rsquo;s commands to affect NCPs&amp;rsquo;
positions, so they need to run in tandem.  Currently they are run all at once;
it would be better to have a way to run them the way the server did, or at
least stretch them out as much as possible.&lt;/p&gt;

&lt;p&gt;Once this is finished, the client loads the new, latest state received from the
server.  Re-running the commands the server ran between the delta&amp;rsquo;s start &amp;amp;
end state is an imperfect process, so it can&amp;rsquo;t be relied on to perfectly create
the state.  After this step, synchronization is complete, and re-prediction
commences.&lt;/p&gt;

&lt;p&gt;The server won&amp;rsquo;t always run consoleplayer&amp;rsquo;s commands in lock-step.  The client
may send commands &lt;sup&gt;100&lt;/sup&gt;&amp;frasl;&lt;sub&gt;80&lt;/sub&gt;, &lt;sup&gt;101&lt;/sup&gt;&amp;frasl;&lt;sub&gt;81&lt;/sub&gt;, and &lt;sup&gt;102&lt;/sup&gt;&amp;frasl;&lt;sub&gt;82&lt;/sub&gt; (TIC/Index), but the server may
run them all on TIC 101.  Let&amp;rsquo;s stipulate that command 81 triggered a lift at
TIC 101.&lt;/p&gt;

&lt;p&gt;The client will then (possibly, but let&amp;rsquo;s say it does for the sake of our
example) receive a delta &amp;ldquo;server received commands &amp;lt;= 82 at TIC 101&amp;rdquo;.  So it
synchronizes all commands &amp;lt;= 82, and spawns the lift at 101.&lt;/p&gt;

&lt;p&gt;When the client first ran command 82, the lift had already been activated, so
this TIC (102) would be the 2nd time the lift had been moved.  However, after
synchronization, the TICs will still align, but the commands won&amp;rsquo;t.  Let&amp;rsquo;s say
that the client has 3 commands left (&lt;sup&gt;103&lt;/sup&gt;&amp;frasl;&lt;sub&gt;83&lt;/sub&gt;, &lt;sup&gt;104&lt;/sup&gt;&amp;frasl;&lt;sub&gt;84&lt;/sub&gt;, &lt;sup&gt;105&lt;/sup&gt;&amp;frasl;&lt;sub&gt;85&lt;/sub&gt;) that the server
has yet to acknowledge receipt of.  It will now run each of these commands
separately, and move the lift 3 more times.  However, initially, by the
time the client ran command 85, the lift had already been moved 5 times.  So
when the client initially predicted the world out to &lt;sup&gt;105&lt;/sup&gt;&amp;frasl;&lt;sub&gt;85&lt;/sub&gt;, the lift had moved
5 times, but now after re-prediction, the lift has only moved 4 times.  This
will cause the lift to snap back 1 TIC&amp;rsquo;s worth of movement.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll also notice that the client is about to run TIC 102, but will then run
command &lt;sup&gt;103&lt;/sup&gt;&amp;frasl;&lt;sub&gt;83&lt;/sub&gt;.  This disparity allows the client to know that it&amp;rsquo;s fallen
behind.  When the client notices this, it runs an extra TIC, without a command.
This runs the world simulation, but doesn&amp;rsquo;t move consoleplayer.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Site</title>
      <link>http://totaltrash.org/post/newsite/</link>
      <pubDate>Wed, 12 Nov 2014 20:27:57 -0500</pubDate>
      
      <guid>http://totaltrash.org/post/newsite/</guid>
      <description>&lt;p&gt;Ever since TotalTrash was converted to a static site, I&amp;rsquo;ve wanted a way to add
pages without copying and pasting tons of markup and updating the navbar.  I&amp;rsquo;ve
finally built a new site using &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt;, a static site
generator written in &lt;a href=&#34;http://golang.org&#34;&gt;Go&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Additionally, I plan to feature more news on TT.  I&amp;rsquo;ve wanted a place to post
&lt;a href=&#34;/d2k&#34;&gt;D2K&lt;/a&gt; updates, and I think TT is where that belongs.&lt;/p&gt;

&lt;p&gt;I may backdate some posts just for content&amp;rsquo;s sake.  We&amp;rsquo;ll see how it goes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>D2K</title>
      <link>http://totaltrash.org/post/d2k/</link>
      <pubDate>Sun, 02 Mar 2014 21:09:13 -0500</pubDate>
      
      <guid>http://totaltrash.org/post/d2k/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve decided to start working on a new source port called &lt;a href=&#34;/d2k&#34;&gt;Doom2K&lt;/a&gt; or
&amp;ldquo;D2K&amp;rdquo; for short.  My goal is to build a state-of-the-art multiplayer source
port capable of being the standard-bearer for multiplayer Doom.  This, in my
mind, means a couple of things.&lt;/p&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;Message-Based Netcode Is Broken&lt;/h3&gt;

&lt;p&gt;ZDaemon, Zandronum, and Odamex all use message-based netcode.  For example,
there is (historically) a function called &lt;code&gt;P_SpawnMobj&lt;/code&gt; which spawns a new
actor into the game.  Serverside, inside of &lt;code&gt;P_SpawnMobj&lt;/code&gt; is a call to a
function that broadcasts a &amp;ldquo;mobj spawned&amp;rdquo; message; let&amp;rsquo;s call it
&lt;code&gt;SV_BroadcastMobjSpawned&lt;/code&gt;.  For illustration&amp;rsquo;s sake, it generally looks
something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---------
| ID    |
---------
| X     |
---------
| Y     |
---------
| Z     |
---------
| Angle |
---------
| Type  |
---------
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This model &amp;ldquo;works&amp;rdquo; for any number of game events.  EECS, for example, has 44
messages.  Odamex has 112.  The way message-based netcode &amp;ldquo;scales up&amp;rdquo; is
message proliferation, and there are a number of downsides to this.&lt;/p&gt;

&lt;h4 id=&#34;toc_1&#34;&gt;You have to litter your code with network messages&lt;/h4&gt;

&lt;p&gt;Ugly, error-prone, and overly complicates extending the engine (scripting).&lt;/p&gt;

&lt;h4 id=&#34;toc_2&#34;&gt;You have to exempt huge swaths of code from running clientside&lt;/h4&gt;

&lt;p&gt;Same as above.&lt;/p&gt;

&lt;h4 id=&#34;toc_3&#34;&gt;Consistency is complicated&lt;/h4&gt;

&lt;p&gt;Unless you package up all your message into a single packet (assuming it will
all fit), consistency requires sequencing and a &amp;ldquo;tic ended&amp;rdquo; message.&lt;/p&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;Doom Scripting Is Busted&lt;/h3&gt;

&lt;p&gt;Probably the best scripting out there is Doomsday.  Otherwise, you can use
EDGE/3DGE and COAL, or you can use ZDoom and ACS.  I think you can use
FraggleScript in Legacy.&lt;/p&gt;

&lt;p&gt;The situation isn&amp;rsquo;t great though.&lt;/p&gt;

&lt;p&gt;With a powerful scripting language, it would be possible to implement new game
modes (like CTF), convert most of Doom&amp;rsquo;s physics and original game play, and
represent assets and configuration in scripting also.  PWO, for example, could
simply be a user-provided function in a config.&lt;/p&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;ASCII Is Out, Unicode Is In&lt;/h3&gt;

&lt;p&gt;Unless Doomsday uses UTF-8, I&amp;rsquo;m unaware of any source ports that are
Unicode-aware.  This has serious implications for Doom&amp;rsquo;s popularity outside of
English-speaking countries.&lt;/p&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;Software Rendering Is Limited And Slow&lt;/h3&gt;

&lt;p&gt;Software rendering is much slower than hardware-accelerated OpenGL rendering.
In general, people who prefer software rendering do so because it&amp;rsquo;s more
faithful to Doom&amp;rsquo;s original renderer (which almost no port uses anymore, due to
its bugs and limitations).  However, with display pixel count rising, software
rendering is becoming less and less feasible.&lt;/p&gt;

&lt;p&gt;Software renderers also have various limitations: lack of support for portals,
3D architecture (slopes, room-over-room, etc.), bad math (wobbling flats,
problems with long walls, inaccurate flat rendering, etc.), and so on.&lt;/p&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;Goals&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;/d2k/goals&#34;&gt;My major goals are to fix all of this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Instead of network messages, D2K will use delta-compressed game states, which
avoids all of the problems with message-based netcode (at the expense of
increased CPU usage and RAM consumption).&lt;/p&gt;

&lt;p&gt;D2K will use Lua for scripting.  Current plans include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Implement console in scripting&lt;/li&gt;
&lt;li&gt;Implement new game modes in scripting&lt;/li&gt;
&lt;li&gt;Move Doom physics, game play, and assets to scripting&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;D2K will use UTF-8 instead of ASCII.&lt;/p&gt;

&lt;p&gt;Regarding the renderer, I haven&amp;rsquo;t entirely decided to remove the software
renderer.  My main focus will be on the OpenGL renderer, however, because it&amp;rsquo;s
easier to add advanced renderer features to it.  Further, I will work on
implementing a shader for the OpenGL renderer that accurately emulates Doom&amp;rsquo;s
lighting.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>